generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  users        UserAccount[] @relation(name: "UserAccounts")
  budgets      Budget[]
  debts        Debt[]
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum AccountType {
  PERSONAL
  SHARED
}

model User {
  id              String        @id @default(uuid())
  name            String
  email           String        @unique
  password        String
  role            UserRole      @default(USER)
  accounts        UserAccount[] @relation(name: "UserAccounts")
  personalBudgets Budget[]
  personalDebts   Debt[]
  transactions    Transaction[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model UserAccount {
  userId    String
  accountId String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserAccounts")
  account   Account     @relation(fields: [accountId], references: [id], onDelete: Cascade, name: "UserAccounts")
  role      AccountRole @default(MEMBER)

  @@id([userId, accountId])
}

model Budget {
  id        String   @id @default(uuid())
  name      String
  amount    Float
  userId    String?
  accountId String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Debt {
  id          String     @id @default(uuid())
  description String
  amount      Float
  userId      String?
  accountId   String?
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  account     Account?   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  status      DebtStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Transaction {
  id         String          @id @default(uuid())
  amount     Float
  type       TransactionType
  date       DateTime        @default(now())
  accountId  String
  account    Account         @relation(fields: [accountId], references: [id])
  userId     String?
  user       User?           @relation(fields: [userId], references: [id])
  categoryId String?
  category   Category?       @relation(fields: [categoryId], references: [id])
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Category {
  id           String        @id @default(uuid())
  name         String
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum DebtStatus {
  PENDING
  PAID
}

enum AccountRole {
  OWNER
  MEMBER
}

enum UserRole {
  USER
  ADMIN
}
