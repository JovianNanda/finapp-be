// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(uuid())
  name      String
  type      AccountType
  users     UserAccount[]
  budgets   Budget[]
  debts     Debt[]
  transactions Transaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum AccountType {
  PERSONAL
  SHARED
}

model User {
  id        String         @id @default(uuid())
  name      String
  email     String         @unique
  password  String
  role      UserRole @default(USER) // Add this line
  accounts  UserAccount[]
  personalBudgets Budget[]
  personalDebts   Debt[]
  transactions Transaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserAccount {
  userId    String
  accountId String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  role      AccountRole
  @@id([userId, accountId])
}

model Budget {
  id         String   @id @default(uuid())
  name       String
  amount     Float
  userId     String?  // Null if shared budget
  accountId  String?  // Null if personal budget
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  account    Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Debt {
  id         String   @id @default(uuid())
  description String
  amount     Float
  userId     String?  // Null if shared debt
  accountId  String?  // Null if personal debt
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  account    Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  status     DebtStatus @default(PENDING)
  createdAt  DateTime @default(now())
}

model Transaction {
  id        String   @id @default(uuid())
  amount    Float
  type      TransactionType
  date      DateTime @default(now())
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  createdAt DateTime @default(now())
}

model Category {
  id          String   @id @default(uuid())
  name        String
  transactions Transaction[]
  createdAt   DateTime @default(now())
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum DebtStatus {
  PENDING
  PAID
}

enum AccountRole {
  OWNER
  MEMBER
}

enum UserRole {
  USER
  ADMIN
}